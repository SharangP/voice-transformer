function [ warpedSig, warpedIterp ] = timeWarp( target, source, window, overlap, nfft )
%TIMEWARP Summary of this function goes here
%   Detailed explanation goes here

%Construct the 'local match' scores matrix as the cosine distance 
% between the STFT magnitudes
stfMag = simmx(abs(target), abs(source));

% Use dynamic programming to find the lowest-cost path between the 
% opposite corners of the cost matrix
% Note that we use 1-SM because dp will find the *lowest* total cost
[p,q,C] = dp2(1-stfMag);

% Calculate the frames in source that are indicated to match each frame
% in target, so we can resynthesize a warped, aligned version
warping = zeros(1, size(target,2));
for i = 1:length(warping); warping(i) = q(find(p >= i, 1 )); end

% Phase-vocoder interpolate D2's STFT under the time warp
warpedIterp = pvsample(source, warping-1, overlap);
% Invert it back to time domain
warpedSig = istft(warpedIterp, nfft, window, overlap)';





target = spectrogram(signal1M,512,256,512,fs);
source = spectrogram(signal1F,512,256,512,fs);

% Dynamic Time warping

%Construct the 'local match' scores matrix as the cosine distance 
% between the STFT magnitudes
stfMag = simmx(abs(target), abs(source));

% Use dynamic programming to find the lowest-cost path between the 
% opposite corners of the cost matrix
% Note that we use 1-SM because dp will find the *lowest* total cost
[p,q,C] = dp2(1-stfMag);

% Calculate the frames in spec1F that are indicated to match each frame
% in spec1M, so we can resynthesize a warped, aligned version
female1 = zeros(1, size(target,2)');
% masterMVN = prtRvGmm('nComponents',3);
% masterMVN.train(masterMDS);
% 
% for n = 1:size(freqs1M,1)
%     n
%     ds(n) = prtDataSetClass(freqs1M(n,:)');
%     gmm1M(n).mle(ds(n));
% end(freqs1M,2));
for i = 1:length(female1); female1(i) = q(find(p >= i, 1 )); end
% Phase-vocoder interpolate D2's STFT under the time warp
femaleInterp = pvsample(source, female1-1, 256);
% Invert it back to time domain
% femaleWarp = istft(femaleInterp, 512, 512, 128)';
femaleWarp = istft(femaleInterp, 512, 512, 256)';
femaleWarp = padarray(femaleWarp,length(signal1M)-length(femaleWarp),'post');

soundsc([femaleWarp],fs);


end

